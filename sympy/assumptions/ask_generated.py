"""
The contents of this file are the return value of
``sympy.assumptions.ask.compute_known_facts``.

Do NOT manually edit this file.
Instead, run ./bin/ask_update.py.
"""

from sympy.core.cache import cacheit
from sympy.logic.boolalg import And, Not, Or
from sympy.assumptions.ask import Q

# -{ Known facts in Conjunctive Normal Form }-
@cacheit
def get_known_facts_cnf():
    return And(
        Or(Q.invertible, Q.singular),
        Or(Not(Q.rational), Q.algebraic),
        Or(Not(Q.imaginary), Q.antihermitian),
        Or(Not(Q.algebraic), Q.complex),
        Or(Not(Q.imaginary), Q.complex),
        Or(Not(Q.real), Q.complex),
        Or(Not(Q.transcendental), Q.complex),
        Or(Not(Q.real_elements), Q.complex_elements),
        Or(Not(Q.zero), Q.even),
        Or(Not(Q.infinite), Q.extended_real),
        Or(Not(Q.real), Q.extended_real),
        Or(Not(Q.invertible), Q.fullrank),
        Or(Not(Q.real), Q.hermitian),
        Or(Not(Q.even), Q.integer),
        Or(Not(Q.odd), Q.integer),
        Or(Not(Q.prime), Q.integer),
        Or(Not(Q.positive_definite), Q.invertible),
        Or(Not(Q.unitary), Q.invertible),
        Or(Not(Q.diagonal), Q.lower_triangular),
        Or(Not(Q.positive), Q.nonnegative),
        Or(Not(Q.zero), Q.nonnegative),
        Or(Not(Q.negative), Q.nonpositive),
        Or(Not(Q.zero), Q.nonpositive),
        Or(Not(Q.negative), Q.nonzero),
        Or(Not(Q.positive), Q.nonzero),
        Or(Not(Q.diagonal), Q.normal),
        Or(Not(Q.unitary), Q.normal),
        Or(Not(Q.prime), Q.positive),
        Or(Not(Q.orthogonal), Q.positive_definite),
        Or(Not(Q.integer), Q.rational),
        Or(Not(Q.irrational), Q.real),
        Or(Not(Q.negative), Q.real),
        Or(Not(Q.positive), Q.real),
        Or(Not(Q.rational), Q.real),
        Or(Not(Q.zero), Q.real),
        Or(Not(Q.integer_elements), Q.real_elements),
        Or(Not(Q.invertible), Q.square),
        Or(Not(Q.normal), Q.square),
        Or(Not(Q.symmetric), Q.square),
        Or(Not(Q.diagonal), Q.symmetric),
        Or(Not(Q.lower_triangular), Q.triangular),
        Or(Not(Q.unit_triangular), Q.triangular),
        Or(Not(Q.upper_triangular), Q.triangular),
        Or(Not(Q.orthogonal), Q.unitary),
        Or(Not(Q.diagonal), Q.upper_triangular),
        Or(Not(Q.algebraic), Not(Q.transcendental)),
        Or(Not(Q.antihermitian), Not(Q.hermitian)),
        Or(Not(Q.composite), Not(Q.prime)),
        Or(Not(Q.even), Not(Q.odd)),
        Or(Not(Q.finite), Not(Q.infinite)),
        Or(Not(Q.imaginary), Not(Q.real)),
        Or(Not(Q.invertible), Not(Q.singular)),
        Or(Not(Q.irrational), Not(Q.rational)),
        Or(Not(Q.negative), Not(Q.positive)),
        Or(Not(Q.negative), Not(Q.zero)),
        Or(Not(Q.positive), Not(Q.zero)),
        Or(Not(Q.complex), Q.algebraic, Q.transcendental),
        Or(Not(Q.integer), Q.even, Q.odd),
        Or(Not(Q.extended_real), Q.infinite, Q.real),
        Or(Not(Q.real), Q.irrational, Q.rational),
        Or(Not(Q.triangular), Q.lower_triangular, Q.upper_triangular),
        Or(Not(Q.nonzero), Q.negative, Q.positive),
        Or(Not(Q.nonpositive), Q.negative, Q.zero),
        Or(Not(Q.nonnegative), Q.positive, Q.zero),
        Or(Not(Q.lower_triangular), Not(Q.upper_triangular), Q.diagonal),
        Or(Not(Q.fullrank), Not(Q.square), Q.invertible),
        Or(Not(Q.real), Not(Q.unitary), Q.orthogonal),
        Or(Not(Q.real), Q.negative, Q.positive, Q.zero),
        Or(Not(Q.integer), Not(Q.positive), Q.composite, Q.prime)
    )

# -{ Known facts in compressed sets }-
@cacheit
def get_known_facts_dict():
    return {
        Q.algebraic: {Q.algebraic, Q.complex},
        Q.antihermitian: {Q.antihermitian},
        Q.commutative: {Q.commutative},
        Q.complex: {Q.complex},
        Q.complex_elements: {Q.complex_elements},
        Q.composite: {Q.composite},
        Q.diagonal: {Q.diagonal, Q.lower_triangular, Q.normal, Q.square,
        Q.symmetric, Q.triangular, Q.upper_triangular},
        Q.even: {Q.algebraic, Q.complex, Q.even, Q.extended_real,
        Q.hermitian, Q.integer, Q.rational, Q.real},
        Q.extended_real: {Q.extended_real},
        Q.finite: {Q.finite},
        Q.fullrank: {Q.fullrank},
        Q.hermitian: {Q.hermitian},
        Q.imaginary: {Q.antihermitian, Q.complex, Q.imaginary},
        Q.infinite: {Q.extended_real, Q.infinite},
        Q.integer: {Q.algebraic, Q.complex, Q.extended_real, Q.hermitian,
        Q.integer, Q.rational, Q.real},
        Q.integer_elements: {Q.complex_elements, Q.integer_elements,
        Q.real_elements},
        Q.invertible: {Q.fullrank, Q.invertible, Q.square},
        Q.irrational: {Q.complex, Q.extended_real, Q.hermitian,
        Q.irrational, Q.nonzero, Q.real},
        Q.is_true: {Q.is_true},
        Q.lower_triangular: {Q.lower_triangular, Q.triangular},
        Q.negative: {Q.complex, Q.extended_real, Q.hermitian, Q.negative,
        Q.nonpositive, Q.nonzero, Q.real},
        Q.nonnegative: {Q.complex, Q.extended_real, Q.hermitian,
        Q.nonnegative, Q.real},
        Q.nonpositive: {Q.complex, Q.extended_real, Q.hermitian,
        Q.nonpositive, Q.real},
        Q.nonzero: {Q.complex, Q.extended_real, Q.hermitian, Q.nonzero,
        Q.real},
        Q.normal: {Q.normal, Q.square},
        Q.odd: {Q.algebraic, Q.complex, Q.extended_real, Q.hermitian,
        Q.integer, Q.nonzero, Q.odd, Q.rational, Q.real},
        Q.orthogonal: {Q.fullrank, Q.invertible, Q.normal, Q.orthogonal,
        Q.positive_definite, Q.square, Q.unitary},
        Q.positive: {Q.complex, Q.extended_real, Q.hermitian,
        Q.nonnegative, Q.nonzero, Q.positive, Q.real},
        Q.positive_definite: {Q.fullrank, Q.invertible,
        Q.positive_definite, Q.square},
        Q.prime: {Q.algebraic, Q.complex, Q.extended_real, Q.hermitian,
        Q.integer, Q.nonnegative, Q.nonzero, Q.positive, Q.prime,
        Q.rational, Q.real},
        Q.rational: {Q.algebraic, Q.complex, Q.extended_real, Q.hermitian,
        Q.rational, Q.real},
        Q.real: {Q.complex, Q.extended_real, Q.hermitian, Q.real},
        Q.real_elements: {Q.complex_elements, Q.real_elements},
        Q.singular: {Q.singular},
        Q.square: {Q.square},
        Q.symmetric: {Q.square, Q.symmetric},
        Q.transcendental: {Q.complex, Q.transcendental},
        Q.triangular: {Q.triangular},
        Q.unit_triangular: {Q.triangular, Q.unit_triangular},
        Q.unitary: {Q.fullrank, Q.invertible, Q.normal, Q.square,
        Q.unitary},
        Q.upper_triangular: {Q.triangular, Q.upper_triangular},
        Q.zero: {Q.algebraic, Q.complex, Q.even, Q.extended_real,
        Q.hermitian, Q.integer, Q.nonnegative, Q.nonpositive,
        Q.rational, Q.real, Q.zero},
    }
