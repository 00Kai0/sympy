# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008, 2009, 2010, 2011 SymPy Development Team
# This file is distributed under the same license as the SymPy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SymPy 0.7.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2011-12-17 15:29\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../src/tutorial.txt:5
# 3b8d0d99cbd0485d8a0f874d50c2e0ba
msgid "Tutorial"
msgstr ""

#: ../../src/tutorial.txt:10
# 261dbc2a93064851bb80b80a8985f0bd
msgid "Introduction"
msgstr ""

#: ../../src/tutorial.txt:12
# d007423f3c5d4407b0ca3221168f4a1e
msgid "SymPy is a Python library for symbolic mathematics. It aims to become a full-featured computer algebra system (CAS) while keeping the code as simple as possible in order to be comprehensible and easily extensible.  SymPy is written entirely in Python and does not require any external libraries."
msgstr ""

#: ../../src/tutorial.txt:17
# 344f5db4e74749c1a76459f6cec09b63
msgid "This tutorial gives an overview and introduction to SymPy. Read this to have an idea what SymPy can do for you (and how) and if you want to know more, read the :ref:`SymPy User's Guide <guide>`, :ref:`SymPy Modules Reference <module-docs>`. or the `sources <https://github.com/sympy/sympy/>`_ directly."
msgstr ""

#: ../../src/tutorial.txt:26
# 12619172a6874cb4af84282e3e1bfc39
msgid "First Steps with SymPy"
msgstr ""

#: ../../src/tutorial.txt:28
# 6f67d8997f1a474288d6bd50f5ddbc4f
msgid "The easiest way to download it is to go to http://code.google.com/p/sympy/ and download the latest tarball from the Featured Downloads:"
msgstr ""

#: ../../src/tutorial.txt:34
# 65bde5e4aded4818bc11c4b9cfc8a3b7
msgid "Unpack it:"
msgstr ""

#: ../../src/tutorial.txt:40
# 76f6f7d72759408084134e093b5d9aea
msgid "and try it from a Python interpreter:"
msgstr ""

#: ../../src/tutorial.txt:54
# 4ddd39aeea714e9f8495cd77f7e4d7dd
msgid "You can use SymPy as shown above and this is indeed the recommended way if you use it in your program. You can also install it using ``./setup.py install`` as any other Python module, or just install a package in your favourite Linux distribution, e.g.:"
msgstr ""

#: ../../src/tutorial.txt:80
# ce08a431018449c093786fe229ef9736
msgid "For other means how to install SymPy, consult the  Downloads_ tab on the SymPy's webpage."
msgstr ""

#: ../../src/tutorial.txt:87
# e81794f1d22c4f47b1f0b5f484ccb789
msgid "isympy Console"
msgstr ""

#: ../../src/tutorial.txt:89
# 342865b9196045a6a2a11ae9d69bc980
msgid "For experimenting with new features, or when figuring out how to do things, you can use our special wrapper around IPython called ``isympy`` (located in ``bin/isympy`` if you are running from the source directory) which is just a standard Python shell that has already imported the relevant SymPy modules and defined the symbols x, y, z and some other things:"
msgstr ""

#: ../../src/tutorial.txt:119
# 9d9f7e2ea55549268218f99a5b14593a
msgid "Commands entered by you are bold. Thus what we did in 3 lines in a regular Python interpreter can be done in 1 line in isympy."
msgstr ""

#: ../../src/tutorial.txt:124
# f53c41b84d8b4d47894877572350325c
msgid "Using SymPy as a calculator"
msgstr ""

#: ../../src/tutorial.txt:126
# c6a7837a22d44c27a5d35a905779bd84
msgid "SymPy has three built-in numeric types: Float, Rational and Integer."
msgstr ""

#: ../../src/tutorial.txt:128
# 68eba98bb6f742d799aba6051f7f3d0f
msgid "The Rational class represents a rational number as a pair of two Integers: the numerator and the denominator. So Rational(1,2) represents 1/2, Rational(5,2) represents 5/2, and so on."
msgstr ""

#: ../../src/tutorial.txt:147
# 4178f4aea2b54612a2a0c8f74fe2aa63
msgid "Proceed with caution while working with Python int's and floating point numbers, especially in division, since you may create a Python number, not a SymPy number. A ratio of two Python ints may create a float -- the \"true division\" standard of Python 3 and the default behavior of ``isympy`` which imports division from __future__::"
msgstr ""

#: ../../src/tutorial.txt:157
# 723ba484cf134b71aaf8e7140c9a3954
msgid "But in earlier Python versions where division has not been imported, a truncated int will result::"
msgstr ""

#: ../../src/tutorial.txt:163
# 0f88584459994baa87824d3fd4cf34f1
msgid "In both cases, however, you are not dealing with a SymPy Number because Python created its own number. Most of the time you will probably be working with Rational numbers, so make sure to use Rational to get the SymPy result. One might find it convenient to equate ``R`` and Rational::"
msgstr ""

#: ../../src/tutorial.txt:175
# bf581140e5ea4f8f98031862c785375e
msgid "We also have some special constants, like e and pi, that are treated as symbols (1+pi won't evaluate to something numeric, rather it will remain as 1+pi), and have arbitrary precision::"
msgstr ""

#: ../../src/tutorial.txt:189
# 366cb3315e5f4371927639cebbf8a726
msgid "as you see, evalf evaluates the expression to a floating-point number"
msgstr ""

#: ../../src/tutorial.txt:191
# b300cf55ed11465bac6e0991d6f61a15
msgid "The symbol ``oo`` is used for a class defining mathematical infinity::"
msgstr ""

#: ../../src/tutorial.txt:200
# addc7fddfd294a0e8da003463f35b614
msgid "Symbols"
msgstr ""

#: ../../src/tutorial.txt:202
# 8508a3480ca34bd4a8741733e17ccc56
msgid "In contrast to other Computer Algebra Systems, in SymPy you have to declare symbolic variables explicitly::"
msgstr ""

#: ../../src/tutorial.txt:209
# 19bcc88285724ae99b448a86d7980ce9
msgid "On the left is the normal Python variable which has been assigned to the SymPy Symbol class. Predefined symbols (including those for symbols with Greek names) are available for import from abc:"
msgstr ""

#: ../../src/tutorial.txt:215
# 6b654b5bda774aa0a4b150388bc102dc
msgid "Symbols can also be created with the ``symbols`` or ``var`` functions, the latter automatically adding the created symbols to the namespace, and both accepting a range notation:"
msgstr ""

#: ../../src/tutorial.txt:227
# aa93d9743638443ebbae8bc5bee19e56
msgid "Instances of the Symbol class \"play well together\" and are the building blocks of expresions::"
msgstr ""

#: ../../src/tutorial.txt:239
# c613786cee894688b20cdccfeaac8c9b
msgid "They can be substituted with other numbers, symbols or expressions using ``subs(old, new)``::"
msgstr ""

#: ../../src/tutorial.txt:250
# 3872add29a8b4a71a5e26a3218130491
msgid "For the remainder of the tutorial, we assume that we have run::"
msgstr ""

#: ../../src/tutorial.txt:255
# d1b280862f04408a98ba048cc9460eaa
msgid "This will make things look better when printed. See the :ref:`printing-tutorial` section below. If you have a unicode font installed, you can pass use_unicode=True for a slightly nicer output."
msgstr ""

#: ../../src/tutorial.txt:260
# 17ee30ecb05a410d94cccf0cc229ae5b
msgid "Algebra"
msgstr ""

#: ../../src/tutorial.txt:262
# 673fbe9f608748128027755ac1b0d7cb
msgid "For partial fraction decomposition, use ``apart(expr, x)``::"
msgstr ""

#: ../../src/tutorial.txt:287
# 723c57a6e36f43eca18771e2ad246955
msgid "To combine things back together, use ``together(expr, x)``::"
msgstr ""

#: ../../src/tutorial.txt:309
# 607fa824a12d461d9eaf6c83bbc902d0
msgid "Calculus"
msgstr ""

#: ../../src/tutorial.txt:314
# 9cbc010ae5b54d2a9222db8a78a2687c
msgid "Limits"
msgstr ""

#: ../../src/tutorial.txt:316
# e2cfd8cf367b4f41a2eb8f98045e1f45
msgid "Limits are easy to use in SymPy, they follow the syntax ``limit(function, variable, point)``, so to compute the limit of f(x) as x -> 0, you would issue ``limit(f, x, 0)``::"
msgstr ""

#: ../../src/tutorial.txt:325
# 7cc96e845d0a4c479199f4a51ed7d665
msgid "you can also calculate the limit at infinity::"
msgstr ""

#: ../../src/tutorial.txt:336
# d67693fb8cc04954be3bff6aaa712bfa
msgid "for some non-trivial examples on limits, you can read the test file `test_demidovich.py <https://github.com/sympy/sympy/blob/master/sympy/series/tests/test_demidovich.py>`_"
msgstr ""

#: ../../src/tutorial.txt:343
# c92009d7b6df4e2d8f9fe9ad14657bbd
msgid "Differentiation"
msgstr ""

#: ../../src/tutorial.txt:345
# 476aa0220145495a932178c9fc3b305a
msgid "You can differentiate any SymPy expression using ``diff(func, var)``. Examples::"
msgstr ""

#: ../../src/tutorial.txt:358
# 35850640eccf4071b1b0318a49055f39
msgid "You can check, that it is correct by::"
msgstr ""

#: ../../src/tutorial.txt:366
# 5ffab586313e4970aa3c933d631bc676
msgid "Higher derivatives can be calculated using the ``diff(func, var, n)`` method::"
msgstr ""

#: ../../src/tutorial.txt:383
# 0624a0af400f4e78a351b056a7ba009c
msgid "Series expansion"
msgstr ""

#: ../../src/tutorial.txt:385
# b40c746b225d4749a9298ad077c3ce4d
msgid "Use ``.series(var, point, order)``::"
msgstr ""

#: ../../src/tutorial.txt:400
# f9106b494ab2465bbbd4108736f67a1e
msgid "Another simple example::"
msgstr ""

#: ../../src/tutorial.txt:420
# d4aa5a4ef31d4327a70c47b42cc0d2d4
msgid "Integration"
msgstr ""

#: ../../src/tutorial.txt:422
# 8e985ebba8d5463bb1af3a3220dd21b0
msgid "SymPy has support for indefinite and definite integration of transcendental elementary and special functions via ``integrate()`` facility, which uses powerful extended Risch-Norman algorithm and some heuristics and pattern matching::"
msgstr ""

#: ../../src/tutorial.txt:430
# 6ff3ff4c189f45078f75a93aa2863ef9
msgid "You can integrate elementary functions::"
msgstr ""

#: ../../src/tutorial.txt:443
# ead91a6c777f47dea8be1a1e50bdf752
msgid "Also special functions are handled easily::"
msgstr ""

#: ../../src/tutorial.txt:451
# 40ad8cd5c7e3460f9cceb59630cf562c
msgid "It is possible to compute definite integrals::"
msgstr ""

#: ../../src/tutorial.txt:460
# 19602e9ed1b641f993f704eb31111beb
msgid "Also, improper integrals are supported as well::"
msgstr ""

#: ../../src/tutorial.txt:472
# b8ef574746f1448ab78da1958f9de616
msgid "Complex numbers"
msgstr ""

#: ../../src/tutorial.txt:474
# 13fbbe2555b14aefb25e48ac5ed298a0
msgid "Besides the imaginary unit, I, which is imaginary, symbols can be created with attributes (e.g. real, positive, complex, etc...) and this will affect how they behave::"
msgstr ""

#: ../../src/tutorial.txt:491
# d726887f4f0444dba6e4ef6a2bb702d6
msgid "Functions"
msgstr ""

#: ../../src/tutorial.txt:493
# 42585fb828e24af79c0278aa14bcc2c3
msgid "**trigonometric**::"
msgstr ""

#: ../../src/tutorial.txt:542
# be0be9ba76c042b68160f1907d2b0d13
msgid "**spherical harmonics**::"
msgstr ""

#: ../../src/tutorial.txt:568
# bdc2ad96783444459c3e66c409914143
msgid "**factorials and gamma function**::"
msgstr ""

#: ../../src/tutorial.txt:586
# c621f51005504ee9890d34156556de57
msgid "**zeta function**::"
msgstr ""

#: ../../src/tutorial.txt:611
# 95ad3014dc9442cc8eb8438b2cc28327
msgid "**polynomials**::"
msgstr ""

#: ../../src/tutorial.txt:650
# d91cad90caee4aa7b2922a42ebe608b1
msgid "Differential Equations"
msgstr ""

#: ../../src/tutorial.txt:652
#: ../../src/tutorial.txt:672
# 18467aefa0364cec936571494c1993da
# 65279c1f5c4a448fbb813790d956ac48
msgid "In ``isympy``::"
msgstr ""

#: ../../src/tutorial.txt:670
# e036530fce79489cbf1c494a9443568f
msgid "Algebraic equations"
msgstr ""

#: ../../src/tutorial.txt:685
# fd5aedc6ba9f45b4868c10764f9e6797
msgid "Linear Algebra"
msgstr ""

#: ../../src/tutorial.txt:690
# 372cf49866874ec1a97d6cb813f8b63b
msgid "Matrices"
msgstr ""

#: ../../src/tutorial.txt:692
# fc4620da22164a3c8f25be8591759f97
msgid "Matrices are created as instances from the Matrix class::"
msgstr ""

#: ../../src/tutorial.txt:700
# 0289f9cec4f140c6adc90aa38f84efee
msgid "They can also contain symbols::"
msgstr ""

#: ../../src/tutorial.txt:715
# ced23cc091a34db6be3b5597fd056f32
msgid "For more about Matrices, see the Linear Algebra tutorial."
msgstr ""

#: ../../src/tutorial.txt:720
# 71124cfe123649c28c7a61251d0b1cdd
msgid "Pattern matching"
msgstr ""

#: ../../src/tutorial.txt:722
# b9ecf875555748978255bc268bc4123c
msgid "Use the ``.match()`` method, along with the ``Wild`` class, to perform pattern matching on expressions. The method will return a dictionary with the required substitutions, as follows::"
msgstr ""

#: ../../src/tutorial.txt:736
# 06d4a8e419854045af79b0076e71616a
msgid "If the match is unsuccessful, it returns ``None``::"
msgstr ""

#: ../../src/tutorial.txt:741
# 7219ffc6e8b0486a913297c19b5fce1f
msgid "One can also use the exclude parameter of the ``Wild`` class to ensure that certain things do not show up in the result::"
msgstr ""

#: ../../src/tutorial.txt:755
# a692f291013a4777a4771188901c6bf2
msgid "Printing"
msgstr ""

#: ../../src/tutorial.txt:757
# 8cfe16423a79408c828d270def412899
msgid "There are many ways to print expressions."
msgstr ""

#: ../../src/tutorial.txt:759
# a9891e6028b644879ce5e3a8489a72a5
msgid "**Standard**"
msgstr ""

#: ../../src/tutorial.txt:761
# 9802b10f6c2d4b7997302f4315e8bf2a
msgid "This is what ``str(expression)`` returns and it looks like this:"
msgstr ""

#: ../../src/tutorial.txt:772
# 461df293b09c46b1bf24bc5c335b4401
msgid "**Pretty printing**"
msgstr ""

#: ../../src/tutorial.txt:774
# 29c9e2204a0948db9d8328300f3bdd1a
msgid "Nice ascii-art printing is produced by the ``pprint`` function:"
msgstr ""

#: ../../src/tutorial.txt:793
# 5fc9fa809fa04cee8113a669f032b9c3
msgid "If you have a unicode font installed, the ``pprint`` function will use it by default. You can override this using the ``use_unicode`` option.:"
msgstr ""

#: ../../src/tutorial.txt:803
# dcbf982351c1414bb0c2653039d6f569
msgid "See also the wiki `Pretty Printing <https://github.com/sympy/sympy/wiki/Pretty-Printing>`_ for more examples of a nice unicode printing."
msgstr ""

#: ../../src/tutorial.txt:807
# af26680251b0437e807a48d7946c3724
msgid "Tip: To make pretty printing the default in the Python interpreter, use::"
msgstr ""

#: ../../src/tutorial.txt:830
# b34cf35aca67417bbedfd0f9912d3dab
msgid "**Python printing**"
msgstr ""

#: ../../src/tutorial.txt:846
# f6300e28499f4c23b1a18aca896340bb
msgid "**LaTeX printing**"
msgstr ""

#: ../../src/tutorial.txt:863
# 3b81c7e35c364676a8ec8587b515ac8b
msgid "**MathML**"
msgstr ""

#: ../../src/tutorial.txt:875
# ee36b86c5d54419fbde01ac89cab213b
msgid "**Pyglet**"
msgstr ""

#: ../../src/tutorial.txt:881
# 8ea61d943b2b4960a879932eba46bc1b
msgid "If pyglet is installed, a pyglet window will open containing the LaTeX rendered expression:"
msgstr ""

#: ../../src/tutorial.txt:887
# 8741a66d24b04738a563afc90a41567b
msgid "Notes"
msgstr ""

#: ../../src/tutorial.txt:889
# 51219a05b9a84e79b754d8d03b7fc4fb
msgid "``isympy`` calls ``pprint`` automatically, so that's why you see pretty printing by default."
msgstr ""

#: ../../src/tutorial.txt:892
# 7b126ec3363b4c63a6d6b98728a9738a
msgid "Note that there is also a printing module available, ``sympy.printing``.  Other printing methods available through this module are:"
msgstr ""

#: ../../src/tutorial.txt:895
# 1001063c4e97442dbcb0491eb0641bba
msgid "``pretty(expr)``, ``pretty_print(expr)``, ``pprint(expr)``: Return or print, respectively, a pretty representation of ``expr``. This is the same as the second level of representation described above."
msgstr ""

#: ../../src/tutorial.txt:897
# ee0ca8e34ce04b458228cb9d6565ec1a
msgid "``latex(expr)``, ``print_latex(expr)``: Return or print, respectively, a `LaTeX <http://www.latex-project.org/>`_  representation of ``expr``"
msgstr ""

#: ../../src/tutorial.txt:899
# ebfeade491644b0b85f72b00bd3c1bdf
msgid "``mathml(expr)``, ``print_mathml(expr)``: Return or print, respectively, a `MathML <http://www.w3.org/Math/>`_ representation of ``expr``."
msgstr ""

#: ../../src/tutorial.txt:901
# bc0334fae2224eb2bfc81a55e7f522dd
msgid "``print_gtk(expr)``: Print ``expr`` to `Gtkmathview <http://helm.cs.unibo.it/mml-widget/>`_, a GTK widget that displays MathML code. The `Gtkmathview <http://helm.cs.unibo.it/mml-widget/>`_ program is required."
msgstr ""

#: ../../src/tutorial.txt:904
# e76c7af419504e458893b76b1b485fd4
msgid "Further documentation"
msgstr ""

#: ../../src/tutorial.txt:906
# 2757e954e4c04b01bf9607f2127c3146
msgid "Now it's time to learn more about SymPy. Go through the :ref:`SymPy User's Guide <guide>` and :ref:`SymPy Modules Reference <module-docs>`."
msgstr ""

#: ../../src/tutorial.txt:910
# a037027043bd483dab5a52bd8d325980
msgid "Be sure to also browse our public `wiki.sympy.org <http://wiki.sympy.org/>`_, that contains a lot of useful examples, tutorials, cookbooks that we and our users contributed, and feel free to edit it."
msgstr ""

